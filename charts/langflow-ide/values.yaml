imagePullSecrets: []

nameOverride: "langflow-service"
# Override for the name of the helm deployment
# Note: using `langflow` as service name causes
# env var collision when deploying on openshift
# https://github.com/langflow-ai/langflow/issues/4330#issuecomment-2459097917
fullnameOverride: "langflow-service"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the
  # fullname template
  name: ""

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # className: "ingress-nginx"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

langflow:
  global:
    image:
      tag: "latest"
  backend:
    replicaCount: 1
    service:
      type: ClusterIP
      port: 7860
    backendOnly: true
    numWorkers: 1
    image:
      repository: langflowai/langflow
      imagePullPolicy: IfNotPresent
      tag: latest
    command:
      - python
      - -m
      - langflow
      - run
      - --host
      - 0.0.0.0
      - --backend-only
    resources:
      requests:
        cpu: 0.5
        memory: 1Gi
      # limits:
      #   cpu: 0.5
      #   memory: 1Gi
    probe:
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 5
      initialDelaySeconds: 5
    env:
      - name: LANGFLOW_PORT
        value: "7860"
      - name: LANGFLOW_ALEMBIC_LOG_FILE
        value: "/app/db/alembic.log"
      - name: LANGFLOW_UPDATE_STARTER_PROJECTS
        value: "false"
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: 9090
      prometheus.io/path: "/metrics"

    securityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
      allowPrivilegeEscalation: false
      runAsGroup: 1000

    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
      runAsGroup: 1000

    externalDatabase:
      # Compose in the SQLAlchemy format:
      # https://docs.sqlalchemy.org/en/20/core/engines.html#database-urls
      enabled: false
      driver: {}
        # value: "postgresql"
      port: {}
      user: {}
      password: {}
        # valueFrom:
        #   secretKeyRef:
        #    key: password
        #    name: <secret-name>
      database: {}

    volumes:
      - name: flows
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: db
        emptyDir: {}

    volumeMounts:
      - name: flows
        mountPath: /app/flows
        readOnly: false
      - name: tmp
        mountPath: /tmp
        readOnly: false
      - name: data
        mountPath: /app/data
        readOnly: false
      - name: db
        mountPath: /app/db
        readOnly: false

    sqlite:
      enabled: true
      volume:
        size: "1Gi"
        existingStorageClassName: "default"
        # If you want the chart to create storage classes, then don't set
        # existingStorageClassName name and provide configuration values
        # for the storage class. The settings vary based on cloud
        # provider. Below are examples for AWS, GCP, and Azure.

        # For AWS
        # storageClass:
        #  provisioner: kubernetes.io/aws-ebs
        #  type: gp2
        #  fsType: ext4
        #  extraParams:
        #     iopsPerGB: "10"

        # For GCP
        # storageClass:
        #   provisioner: kubernetes.io/gce-pd
        #   type: pd-ssd
        #   fsType: ext4
        #   extraParams:
        #      replication-type: none

        # For Azure
        # storageClass:
        #   provisioner: kubernetes.io/azure-disk
        #   fsType: ext4
        #   type: managed-premium
        #   extraParams:
        #     storageaccounttype: Premium_LRS
        #     kind: Managed
        #     cachingmode: ReadOnly
        storageClass: {}

    # autoLogin: true|false
    # superuser: <superuser login>
    # superuserPassword: <superuser password>
    # secretKey: <encryption key, optional>
    # newUserIsActive: true|false

  frontend:
    enabled: true
    replicaCount: 1
    service:
      type: ClusterIP
      port: 8080
    image:
      repository: langflowai/langflow-frontend
      imagePullPolicy: IfNotPresent
      tag: latest
    resources:
      requests:
        cpu: 0.3
        memory: 512Mi
      # limits:
      #   cpu: 0.3
      #   memory: 512Mi
    probe:
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 5
      initialDelaySeconds: 5
    nodeSelector: {}

    tolerations: []

    affinity: {}
    podAnnotations: {}

    securityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 101
      allowPrivilegeEscalation: false
      runAsGroup: 101

    podSecurityContext:
      fsGroup: 101
      runAsUser: 101
      runAsNonRoot: true
      runAsGroup: 101

    volumes:
      - name: tmp
        emptyDir: {}

    volumeMounts:
      - name: tmp
        mountPath: /tmp
        readOnly: false

secretProvider:
  enabled: false

postgresql:
  enabled: false
